---
description: 
globs: 
alwaysApply: true
---
# Goldfinch

Every time you choose to apply a rule(s), explicitly state the rule(s) in the output. You can abbreviate the rule description to a single word or phrase.

## Project Context
Goldfinch is a retirement planning platform managing diverse pension types (ETF, Company, Insurance) with multi-currency support and portfolio tracking.

## Code Style and Structure
- Write concise, technical TypeScript code with accurate examples
- Use functional and declarative programming patterns; avoid classes
- Prefer iteration and modularization over code duplication
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError)
- Favor named exports for routes and utility functions.
- Use the Receive an Object, Return an Object (RORO) pattern.
- Follow the userâ€™s requirements carefully & to the letter.
- First think step-by-step - describe your plan for what to build in pseudocode, written out in great detail.
- Confirm, then write code!
- Fully implement all requested functionality.
- Ensure code is complete! Verify thoroughly finalised.
- Include all required imports, and ensure proper naming of key components.
- If you do not know the answer, say so, instead of guessing.
- Structure repository files as follows:

For detailed directory structure, see docs/tech/architecture/project_structure.md ([project_structure.md](mdc:docs/tech/architecture/project_structure.md))

## Tech Stack
Frontend: React 19, Next.JS 15, TypeScript, Tailwind CSS, Shadcn UI | Backend: FastAPI, Pydantic 2, SQLAlechmy 2, PostgreSQL, Celery

## Naming Conventions
- Use lowercase with dashes for directories (e.g., components/form-wizard)
- Favor named exports for components and utilities
- Use PascalCase for component files (e.g., VisaForm.tsx)
- Use camelCase for utility files (e.g., formValidator.ts)

## State Management
- Use React Context for global state when needed
- Implement proper state persistence using chrome.storage (for extension)
- Implement proper cleanup in useEffect hooks

## UI and Styling
Use Shadcn UI (install via npx shadcn@canary add) with Tailwind CSS for styling

## Error Handling
- Implement proper error boundaries
- Log errors appropriately for debugging
- Provide user-friendly error messages
- Handle network failures gracefully

## Git Usage
Commit Message Prefixes:
- "fix:" for bug fixes
- "feat:" for new features
- "perf:" for performance improvements
- "docs:" for documentation changes
- "style:" for formatting changes
- "refactor:" for code refactoring
- "test:" for adding missing tests
- "chore:" for maintenance tasks

## Documentation and Development Workflow
- Maintain clear README.md with setup instructions and feature completion
- Always update and maintain PROGESS.md with the current progress of the app
- Document API interactions and data flows
- Keep manifest.json well-documented
- Don't include comments unless it's for complex logic