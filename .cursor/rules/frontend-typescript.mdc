---
description: Working on the frontend in typescript with Next.JS
globs: src/frontend/**/*.tsx
alwaysApply: false
---

# Next.js 15 and React 19 Implementation Patterns

## TypeScript Usage
- Use TypeScript for all frontend code; prefer interfaces over types
- Avoid enums; use const objects with 'as const' assertion
- Use functional components with TypeScript interfaces
- Define strict types for message passing between different parts of the extension
- Use absolute imports for all files @/...
- Avoid try/catch blocks unless there's good reason to translate or handle error in that abstraction
- Use explicit return types for all functions

## Syntax and Formatting
- Use "function" keyword for pure functions
- Avoid unnecessary curly braces in conditionals
- Use declarative JSX
- Implement proper TypeScript discriminated unions for message types

## Server Component Patterns
```typescript
// Server Component Example
async function DataFetching() {
  const data = await fetchData() // Direct async call without useEffect
  
  return (
    <Suspense fallback={<Loading />}>
      <DataDisplay data={data} />
    </Suspense>
  )
}

// Parallel Data Fetching
async function ParallelFetch() {
  const [users, posts] = await Promise.all([
    getUsers(),
    getPosts()
  ])
  
  return (
    <section>
      <UserList users={users} />
      <PostGrid posts={posts} />
    </section>
  )
}
```

## Advanced State Management
```typescript
'use client'

// URL State Management with nuqs
import { useQueryState } from 'nuqs'

export function FilterComponent() {
  const [filter, setFilter] = useQueryState('filter')
  const [page, setPage] = useQueryState('page', {
    defaultValue: '1',
    parse: (value) => Number(value)
  })
}

// Form State with useActionState
export function FormComponent() {
  const [state, formAction] = useActionState(submitAction, {
    onSubmit(data) {
      // Handle submission
    },
    onError(error) {
      // Handle error
    }
  })
}
```

## Client/Server Component Patterns
```typescript
// Hybrid Pattern Example
// page.tsx
export default async function Page() {
  const initialData = await fetchInitialData()
  
  return (
    <Suspense fallback={<Loading />}>
      <ServerComponent data={initialData} />
      <ClientInteractivity />
    </Suspense>
  )
}

// Streaming Pattern
export default function StreamingPage() {
  return (
    <>
      <Suspense fallback={<HeaderSkeleton />}>
        <Header />
      </Suspense>
      <Suspense fallback={<MainContentSkeleton />}>
        <MainContent />
      </Suspense>
      <Suspense fallback={<FooterSkeleton />}>
        <Footer />
      </Suspense>
    </>
  )
}
```

```markdown
## Advanced Performance Patterns

### 1. Route Groups and Parallel Routes
```typescript
// (marketing)
//   └── page.tsx
// (shop)
//   └── page.tsx

// Layout sharing between route groups
export default function Layout({ 
  marketing,
  shop 
}: { 
  marketing: React.ReactNode
  shop: React.ReactNode 
}) {
  return (
    <>
      {marketing}
      {shop}
    </>
  )
}
```

### 2. Intercepting Routes
```typescript
// app/feed/page.tsx
// app/feed/photos/[id]/page.tsx
// app/feed/photos/[id]/modal/page.tsx

export default function PhotoModal({ params }: { params: { id: string } }) {
  return (
    <Dialog>
      <PhotoView id={params.id} />
    </Dialog>
  )
}
```

### 3. Advanced Loading UI
```typescript
// loading.tsx with Skeleton
export default function Loading() {
  return (
    <div className="space-y-4">
      <div className="h-8 w-3/4 animate-pulse bg-gray-200 rounded" />
      <div className="h-32 animate-pulse bg-gray-200 rounded" />
      <div className="h-8 w-1/2 animate-pulse bg-gray-200 rounded" />
    </div>
  )
}

// Error handling with recovery
export default function Error({
  error,
  reset,
}: {
  error: Error & { digest?: string }
  reset: () => void
}) {
  return (
    <div className="space-y-4">
      <h2>Something went wrong!</h2>
      <Button onClick={() => reset()}>Try again</Button>
    </div>
  )
}
```

## Testing Patterns
```typescript
import { render, screen } from '@testing-library/react'
import { useRouter } from 'next/navigation'

// Mock Next.js hooks
jest.mock('next/navigation', () => ({
  useRouter: jest.fn()
}))

describe('Component Tests', () => {
  it('handles server actions correctly', async () => {
    const mockRouter = { push: jest.fn() }
    ;(useRouter as jest.Mock).mockReturnValue(mockRouter)
    
    render(<YourComponent />)
    // Test implementation
  })
})
```

## Metadata and SEO
```typescript
// Dynamic metadata generation
export async function generateMetadata({ 
  params 
}: { 
  params: { id: string } 
}): Promise<Metadata> {
  const product = await getProduct(params.id)
  
  return {
    title: product.name,
    description: product.description,
    openGraph: {
      images: [product.image]
    }
  }
}
```